---
title: "Oficina III: OCR e a Pesquisa Hist√≥rica"
subtitle: "<br>Aula 10<br>Prof. Eric Brasil"
date: 2025-04-24
date-format: full
lang: pt-br
format:
  revealjs: 
    theme: [default, custom.scss]
    slide-number: true
    chalkboard: 
      buttons: true
    footer: "Eric Brasil | <a href=https://ericbrasil.com.br/contact/>Entre em contato</a> | CCLHM00114 - Introdu√ß√£o √† Hist√≥ria Digital"
    highlight-style: kate
    logo: "assets/ChatGPT_20250423_142039.png"
---

### Acesse a apresenta√ß√£o da Oficina III com o QR Code abaixo {.center}

::: {.column width="48%"}
![](assets/ChatGPT_20250423_142039.png)
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}

![](assets/qrcode_aula10.png)
:::

---

## Sobre esta apresenta√ß√£o {.center}

<br>

::: {.column width="38%"}
![](assets/IA-BOT_ChatGPT_20250410_091806.png)
:::

::: {.column width="4%"}
:::

::: {.column width="58%"}
Estes slides foram criados com o aux√≠lio do **ChatGPT-4o** (em 23 de abril de 2025).

A responsabilidade final pelo conte√∫do, curadoria e sele√ß√£o das informa√ß√µes √© do autor.
:::

---

## Objetivos da Aula {.center}

- Compreender o funcionamento de tecnologias de Reconhecimento √ìptico de Caracteres (OCR).
- Aplicar ferramentas de OCR na extra√ß√£o de textos de documentos digitalizados.
- Avaliar os desafios e limita√ß√µes do OCR em arquivos hist√≥ricos.

---

## Refer√™ncia {.center}

Brasil, Eric. (2023). Reconhecimento √≥tico de caracteres. In: **HEMDIG(pt) Framework: M√©todos, ferramentas e hemerotecas digitais em portugu√™s (Version v1.0.0)**. Jupyter Book. DOI: [https://doi.org/10.5281/zenodo.8397782](https://doi.org/10.5281/zenodo.8397782).

[Link direto para o cap√≠tulo](https://ericbrasil.com.br/hemdig-framework/part4/capitulo10/cap10.html)

---

## O que √© OCR? {.center}

Chamamos de **reconhecimento √≥tico de caracteres** o processo computacional de aplicar um programa de computador para encontrar padr√µes de escrita em imagens e gerar um documento de texto como resultado.

Esse processo √© muito importante para as pesquisas hist√≥ricas no geral, visto que parte significativa das fontes hist√≥ricas utilizadas em nossas pesquisas ainda s√£o constitu√≠das por documentos escritos (impress√µes ou manuscritos) em papel.

---

## Digitaliza√ß√£o em Massa e Imagens Est√°ticas {.center}

Desde os anos 1990, vemos o crescimento acelerado de projetos de **digitaliza√ß√£o em massa** de documentos hist√≥ricos.

√â muito recorrente que o objeto digital oriundo desse processo de digitaliza√ß√£o seja uma **imagem est√°tica** em formatos variados.

---

## Por que transformar imagem em texto? {.center}

Para aplicar t√©cnicas e ferramentas digitais ‚Äî desde buscas simples at√© t√©cnicas avan√ßadas como **processamento de linguagem natural** ou **modelagem de t√≥picos** ‚Äî precisamos transformar essas imagens em documentos de texto.

S√≥ assim os dados podem ser estruturados conforme as metodologias e interesses das pesquisas.

---

## O papel do OCR {.center}

Para que isso seja poss√≠vel, precisamos realizar o **reconhecimento √≥tico de caracteres (OCR)** nesses conjuntos de imagens.

Portanto, essa √© uma etapa fundamental para pesquisas com **jornais hist√≥ricos digitalizados**.

---

## Um processo desafiador {.center}

Entretanto, esse n√£o √© um processo simples: demanda conhecimento computacional, m√°quinas potentes e investimento de tempo e capital.

Realizar OCR de forma individualizada, sem acompanhamento especializado, muitas vezes se torna um desafio quase intranspon√≠vel.

---

### Dificuldades em jornais hist√≥ricos digitalizados {.center}

Esses desafios se tornam ainda maiores no caso dos jornais hist√≥ricos, pois possuem caracter√≠sticas que dificultam o processo:

- **Baixa qualidade da digitaliza√ß√£o**
- **Fontes muito variadas e desconhecidas**
- **Layouts complexos**, com muitas colunas e grandes varia√ß√µes em uma mesma edi√ß√£o
- **Ru√≠dos na imagem**: rasgos, rasuras, manchas, cortes, etc.

---

## Defini√ß√£o de Estrat√©gias: Volume e Qualidade dos Dados {.center}

As estrat√©gias de tratamento das imagens de jornais digitalizados variam de acordo com:

- **Volume e qualidade das p√°ginas digitalizadas**
- **Disponibilidade de tempo, recursos e conhecimento t√©cnico**

---

## Avalia√ß√£o do seu dataset {.center}

Antes de iniciar o processo de OCR, avalie o conjunto de dados considerando:

1. **Volume do dataset:**  
  - √â composto por milhares de imagens (impossibilitando tratamento manual)?  
  - Ou √© um conjunto reduzido, at√© mil imagens, permitindo interven√ß√£o individualizada?

---

## {.center}

2. **Qualidade da digitaliza√ß√£o:**  
  - Imagens possuem resolu√ß√£o elevada?  
  - J√° foram pr√©-processadas (ru√≠dos, manchas, curvas corrigidas, etc)?

---

## {.center}

3. **Recursos dispon√≠veis:**  
  - H√° financiamento espec√≠fico para tratamento das imagens?
  - H√° profissionais especializados no projeto?

---

## Definindo estrat√©gias realistas para OCR {.center}

A partir dessa avalia√ß√£o, √© poss√≠vel elaborar **estrat√©gias realistas** para a etapa de OCR.  
Tr√™s encaminhamentos principais:

---

### üñ±Ô∏è Estrat√©gia A: Volumes reduzidos {.center}
<br>

- Utilize o **gImageReader** (interface gr√°fica, c√≥digo aberto) ou outro programa de OCR com interface gr√°fica.
- Ideal para tratamento manual, permitindo corre√ß√µes personalizadas.
- Requer menos conhecimento t√©cnico e permite corre√ß√£o manual dos resultados.
- N√£o exige treinamento de modelos espec√≠ficos.

---

### ‚öôÔ∏è Estrat√©gia B: Grande volume de dados  {.center}

- Use **ferramentas de linha de comando** para OCR (ex: Tesseract).
- Se necess√°rio, aplique ferramentas de **pr√©-processamento** (ex: OCR-D).
- Se as imagens forem de alta qualidade, use modelos prontos para o portugu√™s (Tesseract).
- Se houver baixa qualidade, fontes variadas ou layouts complexos, pode ser necess√°rio **treinar modelos espec√≠ficos** ‚Äî exigindo alto investimento computacional e humano.

---

### ü§ñ Estrat√©gia C: Uso de Intelig√™ncia Artificial para OCR {.center} 

- Indicada para:
  - Imagens de baixa qualidade, com muitos ru√≠dos ou fontes n√£o convencionais.
  - Manuscritos ou impressos com desafios severos.
  - Pesquisadores interessados em testar tecnologias de ponta.

---

### ‚ö†Ô∏è Observa√ß√£o importante {.center}

O que √© considerado ‚Äúgrande volume‚Äù depende das especificidades de cada pesquisa:  

- M√©todos, teoria, infraestrutura dispon√≠vel.

- Aqui, **mil imagens** √© um corte pr√°tico e arbitr√°rio, mas avalie sempre suas necessidades.

O fundamental √© adaptar a estrat√©gia **√†s suas possibilidades e objetivos**.

---

## üñºÔ∏è Imagem utilizada nos exemplos {.center}

:::{.columns}
::: {.column width="60%"}
<br>
A imagem ao lado (`ex01.jpg`) foi usada para ilustrar os exemplos pr√°ticos das estrat√©gias A, B e C de OCR nesta oficina.
:::

::: {.column width="40%"}
![](assets/sample1/ex01.jpg){width=60% .center}
:::
:::

---

## üñ±Ô∏èExemplos pr√°ticos: Estrat√©gia B {.center}

Caso sua pesquisa demande o tratamento e an√°lise de **centenas de p√°ginas digitalizadas** de jornais hist√≥ricos,  
o encaminhamento mais acertado √© a utiliza√ß√£o de **interfaces gr√°ficas de usu√°rio (GUIs)**.

---

## üñ±Ô∏èPor que GUIs? {.center}

- Exigem menos conhecimento de programa√ß√£o
- T√™m curva de aprendizagem mais r√°pida
- Resultados mais imediatos e acess√≠veis

---

### üñ±Ô∏èFerramenta recomendada: gImageReader {.center}

::: {.column width="58%"}
- **gImageReader** √© uma GUI open source que utiliza o Tesseract como motor de OCR.
- Desenvolvido por Sandro Mani (GNU GPL v3).
- Dispon√≠vel para **Windows e Linux** e totalmente traduzido para portugu√™s (brasileiro).
:::

::: {.column width="4%"}

:::

::: {.column width="38%"}

![](https://ericbrasil.com.br/hemdig-framework/_images/gimagereader.png)

[Baixe o gImageReader](https://github.com/manisandro/gImageReader/)


:::

---

### üñ±Ô∏èFuncionalidades do gImageReader {.center}

- Importa PDFs e imagens do disco, scanners, √°rea de transfer√™ncia e capturas de tela
- Processa m√∫ltiplas imagens/documentos em lote
- Permite definir √°reas de reconhecimento manual ou automaticamente
- Reconhece para texto simples ou hOCR
- Exibe texto reconhecido ao lado da imagem
- P√≥s-processamento, incluindo corre√ß√£o ortogr√°fica
- Gera PDFs a partir de hOCR

---

## Instala√ß√£o: Ubuntu 22.04 LTS {.center}

```bash
sudo add-apt-repository ppa:sandromani/gimagereader
sudo apt update
sudo apt install gimagereader-gtk
```

Ou instale via [flatpack](https://flathub.org/apps/io.github.manisandro.gImageReader)

Ap√≥s instalar, basta procurar por **gImageReader** no menu de aplicativos.

---

## Instala√ß√£o: Windows 10 {.center}

- Baixe o instalador em: [gImageReader Releases no GitHub](https://github.com/manisandro/gImageReader/releases/tag/v3.4.2)
- Tutorial em v√≠deo: [Como instalar e usar gImageReader no Windows 10 (YouTube)](https://www.youtube.com/watch?v=_7eqj01Hn0M)

---

### Vantagens do gImageReader {.center}

- Resultados positivos tanto em reconhecimento de layout quanto de caracteres
- Excelente op√ß√£o quando **n√£o temos tempo, recursos ou conhecimento** para treinar modelos de OCR
- Permite edi√ß√£o das imagens, trabalho em bloco e corre√ß√£o manual dos resultados
- Taxas de confian√ßa por palavra
- Exporta√ß√£o em diversos formatos (txt, hocr, pdf)
- Metadados completos de cada palavra, linha, bloco e p√°gina

---

## üñ±Ô∏èResumindo {.center}

O **gImageReader** √© a solu√ß√£o ideal para pesquisadores/as que buscam:

- Facilidade de uso
- C√≥digo aberto
- Resultados r√°pidos e edit√°veis
- Integra√ß√£o total com o Tesseract

---

## ‚öôÔ∏èEstrat√©gia B: Exemplos pr√°ticos {.center}

Caso sua pesquisa demande o tratamento e an√°lise de **milhares de p√°ginas digitalizadas** de jornais hist√≥ricos,  
o encaminhamento mais acertado √© a utiliza√ß√£o de **interfaces de linha de comando**  
que re√∫nam m√∫ltiplas ferramentas para:

- Tratamento e processamento de imagens
- Reconhecimento de layouts e caracteres

---

## ‚öôÔ∏èAutomatiza√ß√£o de Workflows {.center}

Ferramentas de linha de comando permitem:

- **Automatizar o processamento em larga escala**
- Integrar etapas como: pr√©-processamento, OCR, p√≥s-processamento e exporta√ß√£o dos resultados
- Gerar datasets em formatos variados (.txt, .csv, .xml)

---

## ‚öôÔ∏èExemplo b√°sico com Tesseract {.center}

Instale o Tesseract e o idioma portugu√™s:

**No Ubuntu (Linux):**

```bash
sudo apt update
sudo apt install tesseract-ocr tesseract-ocr-por
```

---

## ‚öôÔ∏èExemplo b√°sico com Tesseract {.center}

Instale o Tesseract e o idioma portugu√™s:

**No Windows (PowerShell):**

- Baixe o instalador em: [https://github.com/tesseract-ocr/tesseract/releases](https://github.com/tesseract-ocr/tesseract/releases)
- Durante a instala√ß√£o, selecione o idioma portugu√™s (Portuguese - por).
- Ap√≥s instalar, adicione o caminho do Tesseract ao PATH do sistema, se necess√°rio.

---

## ‚öôÔ∏èExemplo b√°sico com Tesseract {.center}

Processando uma √∫nica imagem:

```bash
tesseract ex01.jpg ex01 -l por
```
- `ex01.jpg`: imagem de entrada
- `ex01`: nome do arquivo de sa√≠da (formato .txt por padr√£o)
- `-l por`: modelo de idioma (portugu√™s)

---

## ‚öôÔ∏èExemplo pr√°tico: OCR em lote com Tesseract (terminal) {.center}

### Cen√°rio
- Pasta com v√°rias imagens `.jpeg` (cada uma corresponde a uma p√°gina de um cap√≠tulo de livro)
- Objetivo: gerar um arquivo `.txt` para cada imagem, usando Tesseract em portugu√™s

---

### Passo 1: Navegue at√© a pasta das imagens

```bash
cd /caminho/para/sua/pasta
```
<br>

### Passo 2: Execute o OCR em todas as imagens JPG {.center}

```bash
for img in *.jpeg; do
  tesseract "$img" "${img%.jpeg}" -l por
done
```
- `"$img"`: arquivo de entrada (imagem)
- `"${img%.jpeg}"`: nome do arquivo de sa√≠da, mesmo nome da imagem mas extens√£o `.txt`
- `-l por`: usa o modelo de idioma portugu√™s

---

## Resultado {.center}

- Para cada imagem (ex: `pagina01.jpg`), ser√° gerado um arquivo de texto (`pagina01.txt`) na mesma pasta.
- O conte√∫do de cada `.txt` corresponder√° ao texto extra√≠do da respectiva imagem.

---

## Observa√ß√£o {.center}

- √â importante garantir que o Tesseract est√° instalado e o idioma portugu√™s dispon√≠vel (`tesseract --list-langs`).
- Imagens com baixa qualidade podem gerar textos com muitos erros; revise os resultados!

---

## ‚öôÔ∏èExemplo de workflow mais robusto: OCR-D {.center}

- O [OCR-D](https://ocr-d.de/) √© um framework modular, open source, para processamento em massa de acervos hist√≥ricos.
- Permite encadear m√≥dulos de pr√©-processamento, layout analysis, OCR e exporta√ß√£o.
- Pode ser integrado com Docker para facilitar o uso em servidores.

---

## ‚öôÔ∏èConsidera√ß√µes sobre a Estrat√©gia B {.center}

- **Vantagens:** Alto grau de automa√ß√£o, ideal para grandes volumes, permite personaliza√ß√£o do workflow.
- **Desvantagens:** Exige conhecimento em linha de comando, tempo para configurar, maior curva de aprendizado.
- **Dica:** Documente bem seu processo para garantir reprodutibilidade e facilitar ajustes futuros.

---

## ‚öôÔ∏èRefer√™ncias e recursos {.center}

- [Tesseract OCR - GitHub](https://github.com/tesseract-ocr/tesseract)
- [OCR-D - Documenta√ß√£o](https://ocr-d.de/en/)
- [Imagemagick - Ferramentas de imagem](https://imagemagick.org/)

---

## ü§ñ Exemplos pr√°ticos: Estrat√©gia C {.center}

Caso sua pesquisa envolva imagens de dif√≠cil reconhecimento, manuscritos, fontes pouco convencionais, ou voc√™ deseje experimentar **solu√ß√µes de ponta com intelig√™ncia artificial**, o encaminhamento mais indicado √© o uso de **ferramentas de OCR baseadas em IA**.

---

## ü§ñ Por que usar IA no OCR? {.center}

- Melhor desempenho com imagens de baixa qualidade e fontes incomuns
- Capacidade de lidar com manuscritos e layouts complexos
- Resultados frequentemente superiores ao OCR tradicional
- Permite p√≥s-processamento automatizado, como corre√ß√£o ortogr√°fica e an√°lise estrutural

---

## ü§ñ Dificuldades na Estrat√©gia C {.center}

::: {.column width="48%"}
- **Necessidade de conhecimento em programa√ß√£o**  

- **Curva de aprendizado dos frameworks**  

- **Exig√™ncia de hardware mais potente**  
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
- **Resultados vari√°veis**  
- **Dificuldade com layouts muito complexos**  
:::

---

## ü§ñ **EasyOCR** (Deep Learning) {.center} 

- Utiliza redes neurais convolucionais (CNNs) e LSTM.
- Open source, roda localmente, suporta m√∫ltiplos idiomas.
- Resultados superiores ao Tesseract em muitos casos desafiadores.

#### Fontes: {.center}
- [Documenta√ß√£o oficial EasyOCR](https://github.com/JaidedAI/EasyOCR)
- [Artigo de apresenta√ß√£o EasyOCR](https://arxiv.org/abs/2005.03986)

:::notes
O EasyOCR utiliza modelos de **deep learning** (redes neurais convolucionais e LSTM) para reconhecimento de texto em imagens. Ele √© considerado uma ferramenta ‚Äúmoderna‚Äù porque vai al√©m das abordagens tradicionais baseadas apenas em padr√µes estat√≠sticos ou segmenta√ß√£o cl√°ssica.  
Ou seja, √© uma ferramenta open source que **aplica IA (especificamente deep learning)** para OCR, embora n√£o use modelos do tipo Transformer como o TrOCR.
:::

---

## ü§ñ Exemplo pr√°tico (EasyOCR) {.center}

```python
import easyocr

img_path = "assetssample1/ex01.jpg"
txt_path = "resultado_easyocr.txt"

reader = easyocr.Reader(['pt'])
result = reader.readtext(img_path, detail=0, paragraph=True)

with open(txt_path, "w", encoding="utf-8") as f:
    # Escreve todo o texto extra√≠do (um par√°grafo)
    f.write("\n".join(result))

print(f"OCR salvo em: {txt_path}")
```

---

## ü§ñ Transcri√ß√£o com ChatGPT-4o {.center}

**Data:** 23/04/2025

**Prompt utilizado:**

> transcreva pra mim

---

## Tabela comparativa dos resultados de B e C {.center}

<iframe src="https://ericbrasil.com.br/cclhm00114/aulas/tab_comp" width="100%" height="380px" style="border:none;"></iframe>

---

## Resumo descritivo da compara√ß√£o dos resultados de B e C {.center}

Os resultados dos tr√™s m√©todos de OCR apresentam diferentes n√≠veis de fidelidade ao texto padr√£o-ouro. Veja abaixo uma an√°lise qualitativa de cada um:

---

## Tesseract {.center}

- **Vantagens:**  
  O Tesseract produziu um texto bastante pr√≥ximo do padr√£o-ouro, com boa reprodu√ß√£o da maioria das palavras, pontua√ß√£o e formata√ß√£o.  
  Os principais erros envolvem pequenas trocas de acentua√ß√£o, confus√£o entre algumas letras (como ‚ÄúI‚Äù e ‚Äúl‚Äù em ‚Äúoriginaes‚Äù), e pequenas falhas em trechos de quebra de linha ou em nomes pr√≥prios.

---

## Tesseract {.center}

- **Limita√ß√µes:**  
  Alguns erros de segmenta√ß√£o de palavras (juntando ou separando de modo inadequado), al√©m de dificuldades pontuais em trechos com ru√≠dos visuais ou formata√ß√£o diferenciada.  
  Apesar disso, o resultado √© leg√≠vel e f√°cil de revisar manualmente.

---

## EasyOCR {.center}

- **Vantagens:**  
  O EasyOCR conseguiu reconhecer parte do conte√∫do, mas apresenta muitos erros de leitura, especialmente em palavras com caracteres acentuados e letras ‚ÄúO‚Äù confundidas com ‚Äú0‚Äù (zero), al√©m de interpreta√ß√µes equivocadas em nomes e trechos complexos.

---

## EasyOCR {.center}

- **Limita√ß√µes:**  
  O texto extra√≠do cont√©m v√°rias distor√ß√µes: palavras inventadas, letras trocadas, nomes pr√≥prios alterados e confus√£o com numerais (‚ÄúVeu caro Remos‚Äù, ‚Äúoriglnaes‚Äù, ‚ÄúJuntel a0s origina0s‚Äù).  
  O resultado exigiria uma revis√£o manual intensa para se tornar utiliz√°vel em pesquisa hist√≥rica.

---

## ChatGPT-4o {.center}

- **Vantagens:**  
  O resultado gerado por ChatGPT-4o √© o mais pr√≥ximo do padr√£o-ouro.  
  O texto apresenta corre√ß√£o ortogr√°fica, pontua√ß√£o, segmenta√ß√£o e formata√ß√£o adequadas. Pequenos ajustes de pontua√ß√£o e atualiza√ß√£o de termos s√£o notados, mas o sentido e a estrutura original foram preservados.

---

## ChatGPT-4o {.center}

- **Limita√ß√µes:**  
  Pequenas diferen√ßas em rela√ß√£o ao original podem ocorrer devido ao ajuste autom√°tico de pontua√ß√£o ou normaliza√ß√£o de nomes, mas s√£o m√≠nimas e n√£o prejudicam o entendimento do conte√∫do.

---

## {.center}

- **Tesseract** se mostrou o OCR tradicional mais fiel ao padr√£o, com boa precis√£o, mas ainda exigindo revis√£o.
- **EasyOCR** apresentou o pior desempenho, sendo mais suscet√≠vel a ru√≠dos, erros de segmenta√ß√£o e substitui√ß√£o de caracteres.
- **ChatGPT-4o** entregou o melhor resultado em termos de qualidade de texto, aproximando-se da revis√£o humana, sendo especialmente √∫til para uso direto em pesquisa ou publica√ß√£o, com pouca ou nenhuma edi√ß√£o adicional.

---

## Tabela quantitativa dos resultados de B e C {.center}

<iframe src="https://ericbrasil.com.br/cclhm00114/aulas/tab_quant" width="100%" height="330px" style="border:none;"></iframe>

---

## {.center}
Esses n√∫meros refor√ßam as conclus√µes do resumo anterior:  

- **ChatGPT-4o** √© praticamente id√™ntico ao padr√£o-ouro.
- **Tesseract** √© bastante preciso, mas requer revis√£o manual.
- **EasyOCR** tem desempenho sensivelmente inferior nesse teste.

---

## ‚ö†Ô∏è Dificuldades Gerais no OCR {.center}

Apesar dos avan√ßos das ferramentas e t√©cnicas de OCR, alguns desafios permanecem recorrentes nas pesquisas com documentos hist√≥ricos digitalizados:

::: {.column width="48%"}
- **Baixa qualidade de digitaliza√ß√£o**  

- **Presen√ßa de ru√≠dos e interfer√™ncias**  

- **Fontes tipogr√°ficas incomuns ou manuscritos**

:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
- **Layouts complexos**  

- **Desalinhamento das p√°ginas**

- **Varia√ß√£o entre diferentes edi√ß√µes e per√≠odos hist√≥ricos**
:::

---

## Impacto dessas dificuldades {.center}

- Redu√ß√£o da precis√£o do texto reconhecido
- Aumento do tempo de corre√ß√£o manual
- Necessidade de pr√©-processamento das imagens
- Limita√ß√£o no uso direto de t√©cnicas automatizadas de an√°lise

---

